const {Event, User} = require('../models');const eventServices = require('../services/eventServices');const getEventsPage = async (req, res) => {    try {        let events = await eventServices.getAll()        res.renderWithUser('events/index', {            events: events,        });    } catch (error) {        res.status(500).json({error: error.message});    }};const getEventCreatePage = async (req, res) => {    try {        let events = await eventServices.getAll()        res.renderWithUser('events/create', {            events: events        });    } catch (error) {        res.status(500).json({error: error.message});    }};const createEvent = async (req, res) => {    try {        const {title, description, date, location, userId} = req.body;        let user = await User.findByPk(userId)        if (user) {            await Event.create({                title: title.trim(),                description: description.trim(),                date: date,                location: location.trim(),                userId: user.dataValues.id            })            res.status(200).json({success: true})        } else {            res.status(500).json({error: "Unknown User"});        }    } catch (error) {        res.status(500).json({error: error.message});    }}const getEventEditPage = async (req, res) => {    try {        const eventId = req.params.eventId;        if (eventId) {            let event = await eventServices.getById(eventId)            res.renderWithUser('events/edit', {                event: event,                moment: require("moment")            });        } else {            res.redirect("/")        }    } catch (error) {        res.status(500).json({error: error.message});    }};const updateEvent = async (req, res) => {    try {        const eventId = req.params.eventId;        const {title, description, date, location} = req.body;        let event = await eventServices.getById(eventId)        if (event) {            await eventServices.update(eventId, {                title: title.trim(),                description: description.trim(),                date: date,                location: location.trim()            })            res.status(200).json({success: true})        } else {            res.status(500).json({error: "Unknown Event"});        }    } catch (error) {        res.status(500).json({error: error.message});    }}const getEventDeletePage = async (req, res) => {    try {        const eventId = req.params.eventId;        if (eventId) {            let event = await eventServices.getById(eventId)            if (event) {                res.renderWithUser('events/delete', {                    event: event,                    moment: require("moment")                });            } else {                res.redirect("/")            }        } else {            res.redirect("/")        }    } catch (error) {        res.status(500).json({error: error.message});    }};const deleteEvent = async (req, res) => {    try {        const eventId = req.params.eventId;        let event = await eventServices.getById(eventId)        if (event) {            await eventServices.delete(eventId)            res.status(200).json({success: true})        } else {            res.status(500).json({error: "Unknown Event"});        }    } catch (error) {        res.status(500).json({error: error.message});    }}module.exports = {    getEventsPage,    getEventCreatePage,    createEvent,    getEventEditPage,    updateEvent,    getEventDeletePage,    deleteEvent};